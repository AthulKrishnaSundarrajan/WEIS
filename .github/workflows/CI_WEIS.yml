name: CI_WEIS

# We run CI on push commits on all branches
on: [push, pull_request]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build (${{ matrix.os }} Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}

    defaults:
        run:
            shell: bash -el {0}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macOS-latest", "windows-latest"]
        python-version: ["3.9","3.10","3.11"]
        
    steps:
      #- name: Setup GNU Fortran
      #  #  if: false == contains( matrix.os, 'windows')
      #  uses: awvwgk/setup-fortran@main
        
      - uses: actions/checkout@v4
    
      - name: Install conda/mamba
        uses: conda-incubator/setup-miniconda@v2
        # https://github.com/marketplace/actions/setup-miniconda
        with:
          # To use mamba, uncomment here, comment out the miniforge line
          # mamba-version: "*"
          miniforge-version: "latest"
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: test
          auto-activate-base: false

      - name: Add dependencies mac specific
        if: contains( matrix.os, 'mac')
        run: |
            conda install -y petsc4py mpi4py openmpi compilers
            
      - name: Add dependencies windows specific
        if: contains( matrix.os, 'windows')
        run: |
          conda install -y m2w64-toolchain libpython intel-openmp mkl
      
      - name: Add dependencies ubuntu specific
        if: contains( matrix.os, 'ubuntu')
        run: |
          conda install -y petsc4py mpi4py openmpi
          python -c "import platform; print(platform.node())"
      
      - name: Add test packages
        run: |
          conda install -y pytest pytest-cov coveralls
            
      - name: Show custom environment
        run: |
            conda list
            which -a gfortran
            printenv | sort
          
      # Install WEIS
      - name: Install WEIS
        run: |
          pip install -e .

      # Debugging session
      #- name: Setup tmate session
      #  if: contains( matrix.os, 'windows')
      #  uses: mxschmitt/action-tmate@v3
        
      #- name: Show openfast environment
      #  run: |
      #      which -a openfast
      #      cd /c/Miniconda3/envs/test/Library/bin/
      #      ls *fast*.exe
      #      ls *fast*.dll
      #      openfast -h
      #      python -c "import ctypes; ctypes.cdll.LoadLibrary('openfastlib.dll')"
      #      ls *fast*.dll
      #      cd examples/03_NREL5MW_OC3_spar
      #      python weis_driver.py
          
      # List the collected tests for debugging purposes
      - name: List tests
        run: |
          pytest --collect-only weis 
        
      # Run all tests within WEIS, but not computationally expensive examples
      - name: Run tests within WEIS
        run: |
          pytest --cov-config=.coverageac --cov=weis -p no:warnings --disable-warnings weis 
      
      # Run coveralls
      - name: Run coveralls
        if: contains( matrix.os, 'ubuntu') && contains( matrix.python-version, '3.10')
        uses: coverallsapp/github-action@v2
        # This also works, https://github.com/AndreMiras/coveralls-python-action
        #uses: AndreMiras/coveralls-python-action@develop
        #env:
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #run: |
        #  coveralls --service=github
